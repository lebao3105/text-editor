## Contribute to textworker

So you want to do something for this project?

Thank you for that! You wonder how to tell me about your work, or where should you start?

This document will help you well.

## Table of contents

A. [Setup](#setup)

B. [The source code tree](#the-source-code-tree)

C. [Debugging options](#debugging-options)

D. [Make translations](#make-translations)

E. [Other maintaining stuff](#other-maintaining-stuff)

## Setup

This project of course requires Python 3. 3.10 or higher.

For a true developer environment (in case you don't know), install Git: a version control tool. We use that to get, commit, push or changes.

GitHub itself is a Git hosting service, used for developers around the world.

Using Git and GitHub shortens the time you update, push, require for a merge, wait for response (not always I check my mail box).

Next: Install all dependencies as mentioned in [this README section](./README.md#build-and-install).

But since libtextworker is under heavy development and not complete for a real producion, and textworker uses libtextworker a lot (welp), you should not install it.

Now create a GitHub account if haven't, fork this repository and clone that newly made fork:

```bash
$ git clone https://github.com/<your user name>/texteditor.git
```

(Ignore that $, it's a shell prompt. Can be different on your computer.)

Textworker has a branch name `data`, holds app icons and updater, default settings. Either do:

```bash
$ cd texteditor
$ git submodule update --init
$ cd .. # We are not ready yet
```

Or this if you want to rock that branch too:

```bash
$ git clone -b data <your repository URL, same as above> tew-data
```

Data branch is used here as a Git submodule, placed inside [textworker/](textworker/).

> `tew-data` is the clone destination (must not exist/contain anything inside), change to anything you like.

Also do the same thing as libtextworker if you'd like to work on libtextworker too. If you just want the original source code:

```bash
$ git clone https://github.com/lebao3105/libtextworker.git
```

`cd` to textworker/ (you just made with git), make a new branch:

```bash
$ git branch wip/<blah blah (short and understandable)>
```

> Note: development branches (features, bug) should have `wip/` prefix in name.

Now you can start working!

## The source code tree

We will go fast through this section.

Top-level textworker modules:

* \__init__.py: Contains code setting up icon path, translations, stores some project infomations.

* \__main__.py: The module that will be ran on module start: parse command line arguments.

* Every files else: It's name and things (variable/class/function name, comments) are clear.

data/: Explained above.

extensions/: Not quite 'app extensions', at least for now. Contains code for dialogs and views.

ui/: UI designs made in wxFormBuilder, extensions/ and textworker.mainwindow modules will use them.

## Debugging options

Command-line options: `--custom-config-dir` and `--custom-data-dir` should be what you want

Environment variable: `PYTHONPATH` for the path to libtextworker (if you want to work with it too)

VSCode uses both of these in its [launch.json](.vscode/launch.json).

You also can open Inspector tool from wxPython, available since 1.6dev1. 

Use `importlib.reload` to reload your changes quickly. This can be ran on Inspector.

## Make translations

The main concern is the [po](po/) directory, where all translations are placed.

For translators:

* Add your language code to LOCALES variable in [Makefile](Makefile). Make a copy of [textworker.pot](po/textworker.pot) and name it `<language code>.po`. Place it inside the po directory, of course.

> Warning: translation templates (*.pot) are not always updated. For the best result regenerate the pot first.

* Translate the app, by editing the file manually or with the help of software like Poedit.

* Use Makefile to generate .mo - compiled .po

* Try to run the app with your translation!

For maintainers:

* Just use Makefile to make sure all strings are not missing

* If you made a new file containing strings to translate, add it to [POTFILES](po/POTFILES).

Makefile targets for these:

* makepot: Make po/textworker.pot

* maketrans: Generate .po from textworker template and existing translation (if any)

* genmo: Compile .po

## Other maintaining stuff

### Application images

Assets, app icons, and splash screen are SVG files, this means you need to convert it manually first.

Update assets with Makefile `assets` target.

Update app icons with Makefile `icons` target.

Update splash screens with Makefile `splash` target.

By default embed results (.py files) are kept in the repository for convenient access.

### MANIFEST.in

This file shows what `setuptools` can collect, what it can't for the package it's going to build. So keeping it up-to-date is important.

* Ignore tests

* Ignore generated files for BUILDING (if any) - `.gitignore` may help

* Ignore files that are used to be GENERATED and NOT used for application run (e.g .fbp : wxFormBuilder project file, it can output .xrc or .py depending on our destination; or .po which will be compiled to .mo and we use that)