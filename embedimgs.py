from glob import glob
from typing import Literal
from wx.tools import img2py
import getopt
import os
import sys

__doc__ = "embedimgs [action] [value]\n" \
          "Embed generated PNG images into specific textworker parts.\n" \
          "[action]:\n" \
          "-d = Set application universal data path (Assets repository/data branch on Git repository) for splash screens and app icons\n" \
          "     (Must ends with a path separator else you will see exceptions being raised)" \
          "-h = Show this message\n" \
          "-t = Target (icons/assets/splash)\n" \
          "-a = Same as -d (but not that universal as this is used only on wx version) but for app assets\n" \
          "-s = Use icon and splash screen in (project) 'stable' variant\n\n" \
          "If needed, make .pngs from .svgs first by ImageMagick's convert or Inkscape (or whatever tool you want).\n"

dataPath = os.path.dirname(__file__) + "/textworker/data/"
assetsPath = os.path.dirname(__file__) + "/data/"

useStable: bool = False
projid = "me.lebao3105.textworker"

def remove_if_exists(path: str):
    if os.path.exists(path): os.remove(path)

def append_import_first(path: str):
    with open(path, "x") as f:
        f.write("# Automatically generated by ../embedimgs.py using wxPythons's img2py tool\n")
        f.write("# All changes can be overwritten.\n\n")
        f.write("from wx.lib.embeddedimage import PyEmbeddedImage\n\n")

def update(name: Literal["assets", "icons", "splash"]):
    remove_if_exists(f"textworker/{name}.py")
    append_import_first(f"textworker/{name}.py")

    if name == "assets":
        for img in glob(pathname="*.png", root_dir=assetsPath):
            img2py.img2py(assetsPath + img, "textworker/assets.py", True, imgName=img.removesuffix(".png"))
    else:
        target = projid + ".Devel" if not useStable else ""
        img2py.img2py(f"{dataPath}{name}/" + f"{target}.png",
                      f"textworker/{name}.py", True, imgName="icon" if name == "icons" else "splash")

if __name__ == '__main__':
    try:
        opts, fileArgs = getopt.getopt(sys.argv[1:], "d:a:t:h")
    except getopt.GetoptError as e:
        print(__doc__)
        raise e
    
    for opt, val in opts:
        match opt:
            case "-h": print(__doc__)
            case "-s": useStable = True
            case "-d": dataPath = val
            case "-a": assetsPath = val
            case "-t":
                if not val in ["icons", "assets", "splash"]:
                    raise Exception("Unknown target: must be icons/assets/splash")
                update(val)